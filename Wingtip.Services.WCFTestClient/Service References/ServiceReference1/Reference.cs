//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Wingtip.Services.WCFTestClient.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Customer", Namespace="http://schemas.wingtip.com/Customers")]
    [System.SerializableAttribute()]
    public partial class Customer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContactNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomerIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompanyName {
            get {
                return this.CompanyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyNameField, value) != true)) {
                    this.CompanyNameField = value;
                    this.RaisePropertyChanged("CompanyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContactName {
            get {
                return this.ContactNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ContactNameField, value) != true)) {
                    this.ContactNameField = value;
                    this.RaisePropertyChanged("ContactName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Country {
            get {
                return this.CountryField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryField, value) != true)) {
                    this.CountryField = value;
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomerID {
            get {
                return this.CustomerIDField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomerIDField, value) != true)) {
                    this.CustomerIDField = value;
                    this.RaisePropertyChanged("CustomerID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="Customers", Namespace="http://schemas.wingtip.com/Customers", ItemName="Customer")]
    [System.SerializableAttribute()]
    public class Customers : System.Collections.Generic.List<Wingtip.Services.WCFTestClient.ServiceReference1.Customer> {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://schemas.wingtip.com/CustomerService", ConfigurationName="ServiceReference1.ICustomerService")]
    public interface ICustomerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.wingtip.com/CustomerService/ICustomerService/GetCustomerById", ReplyAction="http://schemas.wingtip.com/CustomerService/ICustomerService/GetCustomerByIdRespon" +
            "se")]
        Wingtip.Services.WCFTestClient.ServiceReference1.Customer GetCustomerById(string customerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.wingtip.com/CustomerService/ICustomerService/GetCustomerById", ReplyAction="http://schemas.wingtip.com/CustomerService/ICustomerService/GetCustomerByIdRespon" +
            "se")]
        System.Threading.Tasks.Task<Wingtip.Services.WCFTestClient.ServiceReference1.Customer> GetCustomerByIdAsync(string customerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.wingtip.com/CustomerService/ICustomerService/ListAllCustomers", ReplyAction="http://schemas.wingtip.com/CustomerService/ICustomerService/ListAllCustomersRespo" +
            "nse")]
        Wingtip.Services.WCFTestClient.ServiceReference1.Customers ListAllCustomers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.wingtip.com/CustomerService/ICustomerService/ListAllCustomers", ReplyAction="http://schemas.wingtip.com/CustomerService/ICustomerService/ListAllCustomersRespo" +
            "nse")]
        System.Threading.Tasks.Task<Wingtip.Services.WCFTestClient.ServiceReference1.Customers> ListAllCustomersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.wingtip.com/CustomerService/ICustomerService/AddCustomer", ReplyAction="http://schemas.wingtip.com/CustomerService/ICustomerService/AddCustomerResponse")]
        Wingtip.Services.WCFTestClient.ServiceReference1.Customer AddCustomer(Wingtip.Services.WCFTestClient.ServiceReference1.Customer item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.wingtip.com/CustomerService/ICustomerService/AddCustomer", ReplyAction="http://schemas.wingtip.com/CustomerService/ICustomerService/AddCustomerResponse")]
        System.Threading.Tasks.Task<Wingtip.Services.WCFTestClient.ServiceReference1.Customer> AddCustomerAsync(Wingtip.Services.WCFTestClient.ServiceReference1.Customer item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.wingtip.com/CustomerService/ICustomerService/UpdateCustomer", ReplyAction="http://schemas.wingtip.com/CustomerService/ICustomerService/UpdateCustomerRespons" +
            "e")]
        Wingtip.Services.WCFTestClient.ServiceReference1.Customer UpdateCustomer(Wingtip.Services.WCFTestClient.ServiceReference1.Customer item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.wingtip.com/CustomerService/ICustomerService/UpdateCustomer", ReplyAction="http://schemas.wingtip.com/CustomerService/ICustomerService/UpdateCustomerRespons" +
            "e")]
        System.Threading.Tasks.Task<Wingtip.Services.WCFTestClient.ServiceReference1.Customer> UpdateCustomerAsync(Wingtip.Services.WCFTestClient.ServiceReference1.Customer item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.wingtip.com/CustomerService/ICustomerService/DeleteCustomer", ReplyAction="http://schemas.wingtip.com/CustomerService/ICustomerService/DeleteCustomerRespons" +
            "e")]
        bool DeleteCustomer(Wingtip.Services.WCFTestClient.ServiceReference1.Customer item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.wingtip.com/CustomerService/ICustomerService/DeleteCustomer", ReplyAction="http://schemas.wingtip.com/CustomerService/ICustomerService/DeleteCustomerRespons" +
            "e")]
        System.Threading.Tasks.Task<bool> DeleteCustomerAsync(Wingtip.Services.WCFTestClient.ServiceReference1.Customer item);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICustomerServiceChannel : Wingtip.Services.WCFTestClient.ServiceReference1.ICustomerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CustomerServiceClient : System.ServiceModel.ClientBase<Wingtip.Services.WCFTestClient.ServiceReference1.ICustomerService>, Wingtip.Services.WCFTestClient.ServiceReference1.ICustomerService {
        
        public CustomerServiceClient() {
        }
        
        public CustomerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CustomerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CustomerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CustomerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Wingtip.Services.WCFTestClient.ServiceReference1.Customer GetCustomerById(string customerID) {
            return base.Channel.GetCustomerById(customerID);
        }
        
        public System.Threading.Tasks.Task<Wingtip.Services.WCFTestClient.ServiceReference1.Customer> GetCustomerByIdAsync(string customerID) {
            return base.Channel.GetCustomerByIdAsync(customerID);
        }
        
        public Wingtip.Services.WCFTestClient.ServiceReference1.Customers ListAllCustomers() {
            return base.Channel.ListAllCustomers();
        }
        
        public System.Threading.Tasks.Task<Wingtip.Services.WCFTestClient.ServiceReference1.Customers> ListAllCustomersAsync() {
            return base.Channel.ListAllCustomersAsync();
        }
        
        public Wingtip.Services.WCFTestClient.ServiceReference1.Customer AddCustomer(Wingtip.Services.WCFTestClient.ServiceReference1.Customer item) {
            return base.Channel.AddCustomer(item);
        }
        
        public System.Threading.Tasks.Task<Wingtip.Services.WCFTestClient.ServiceReference1.Customer> AddCustomerAsync(Wingtip.Services.WCFTestClient.ServiceReference1.Customer item) {
            return base.Channel.AddCustomerAsync(item);
        }
        
        public Wingtip.Services.WCFTestClient.ServiceReference1.Customer UpdateCustomer(Wingtip.Services.WCFTestClient.ServiceReference1.Customer item) {
            return base.Channel.UpdateCustomer(item);
        }
        
        public System.Threading.Tasks.Task<Wingtip.Services.WCFTestClient.ServiceReference1.Customer> UpdateCustomerAsync(Wingtip.Services.WCFTestClient.ServiceReference1.Customer item) {
            return base.Channel.UpdateCustomerAsync(item);
        }
        
        public bool DeleteCustomer(Wingtip.Services.WCFTestClient.ServiceReference1.Customer item) {
            return base.Channel.DeleteCustomer(item);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteCustomerAsync(Wingtip.Services.WCFTestClient.ServiceReference1.Customer item) {
            return base.Channel.DeleteCustomerAsync(item);
        }
    }
}
